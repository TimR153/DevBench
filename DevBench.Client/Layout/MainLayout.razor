@using DevBench.Client.Services
@using System.Globalization
@using Microsoft.Extensions.Localization
@inherits LayoutComponentBase
@inject SettingsService SettingsService
@inject IStringLocalizer<MainLayout> Localizer

<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    @if (!_isInitialized)
    {
        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center"
                  Style="@($"height:100vh; background-color: {_theme.PaletteDark.Background}; min-width: 100vw; position: relative; flex-direction: column;")">
            <MudImage Src="appLogo.png" Alt="Logo" Width="400" Class="mb-6" />
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Style="width: 60%; max-width: 400px; margin: 0 auto;" />
        </MudStack>
    }
    else
    {
        <MudAppBar>
            <MudGrid Spacing="5" Justify="Justify.SpaceBetween">
                <MudItem xs="8" sm="8" md="8">
                    <MudStack Row="true" Spacing="5" AlignItems="AlignItems.Center">
                        <MudLink Href="/">
                            <MudImage Src="appLogo.png" Alt="App Logo" Width="200" />
                        </MudLink>
                        <SearchBox />
                    </MudStack>
                </MudItem>

                <MudItem xs="2" sm="2" md="2">
                    <MudStack Row="true" Spacing="5" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
                        <MudTooltip Text="@Localizer["gitHubRepo"]">
                            <MudIconButton Icon="@Icons.Custom.Brands.GitHub"
                                           Href="https://github.com/timr153/devbench"
                                           Target="_blank"
                                           Color="Color.Inherit"
                                           Edge="Edge.End" />
                        </MudTooltip>
                        <MudTooltip Text="@Localizer["settings"]">
                            <DevBench.Client.Pages.Settings />
                        </MudTooltip>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudAppBar>
        <MudMainContent>
            @Body
        </MudMainContent>
        <Footer />
    }
</MudLayout>

@code {
    private bool _isInitialized = false;
    private bool _isDarkMode;
    private MudThemeProvider? _mudThemeProvider;

    protected override void OnInitialized()
    {
        SettingsService.SettingsChanged += OnSettingsChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var savedCulture = await SettingsService.GetSavedCulture();
            if (!string.IsNullOrEmpty(savedCulture))
            {
                await SettingsService.SetCulture(savedCulture);
            }
            else
            {
                var browserCulture = await SettingsService.GetBrowserCulture();
                if (SupportedLanguages.Any(x => x.CultureCode == browserCulture))
                {
                    await SettingsService.SetCulture(browserCulture);
                }
                else
                {
                    await SettingsService.SetCulture(SupportedLanguages.First().CultureCode);
                }
            }
            var savedDarkMode = await SettingsService.GetSavedDarkMode();
            if (!string.IsNullOrEmpty(savedDarkMode))
            {
                var isDarkMode = string.Equals(savedDarkMode, bool.TrueString, StringComparison.OrdinalIgnoreCase) ? true : false;
                await SettingsService.SetDarkMode(isDarkMode);
            }
            else
            {
                await SettingsService.SetDarkMode(true);
            }
            _isInitialized = true;
            StateHasChanged();
        }
    }

    private void OnSettingsChanged()
    {
        _isDarkMode = SettingsService.IsDarkMode;
        StateHasChanged();
    }

    MudTheme _theme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = MudBlazor.Colors.Blue.Darken2, 
            Secondary = MudBlazor.Colors.LightBlue.Darken4,
            Background = MudBlazor.Colors.Gray.Lighten2, 
            Surface = MudBlazor.Colors.Shades.White,
            AppbarBackground = MudBlazor.Colors.Gray.Darken1,
            DrawerBackground = MudBlazor.Colors.Gray.Lighten1,
            TextPrimary = MudBlazor.Colors.Gray.Darken4,
            TextSecondary = MudBlazor.Colors.Gray.Darken2,
            DrawerText = MudBlazor.Colors.Gray.Darken4,
            AppbarText = MudBlazor.Colors.Shades.White,
            Info = MudBlazor.Colors.Blue.Accent4,
            Success = MudBlazor.Colors.Green.Darken3, 
            Warning = MudBlazor.Colors.Orange.Darken1,   
            Error = MudBlazor.Colors.Red.Darken1, 
            ActionDefault = MudBlazor.Colors.Blue.Darken1, 
            ActionDisabled = MudBlazor.Colors.Gray.Lighten1,
            ActionDisabledBackground = MudBlazor.Colors.Gray.Lighten3,
        },
        PaletteDark = new PaletteDark()
        {
            Primary = MudBlazor.Colors.Blue.Darken3,
            Secondary = MudBlazor.Colors.Blue.Accent2,
            Background = MudBlazor.Colors.Gray.Darken4,
            Surface = MudBlazor.Colors.Gray.Darken3,
            DrawerBackground = MudBlazor.Colors.Gray.Darken4,
            DrawerText = MudBlazor.Colors.Gray.Lighten4,
            AppbarBackground = MudBlazor.Colors.Gray.Darken3,
            TextPrimary = MudBlazor.Colors.Gray.Lighten4,
            TextSecondary = MudBlazor.Colors.Gray.Lighten2,
            Info = MudBlazor.Colors.Blue.Accent2,
            Success = MudBlazor.Colors.Green.Default,
            Warning = MudBlazor.Colors.Orange.Accent2,
            Error = MudBlazor.Colors.Red.Accent2,
            ActionDefault = MudBlazor.Colors.Blue.Lighten2,
            ActionDisabled = MudBlazor.Colors.Gray.Darken1,
            ActionDisabledBackground = MudBlazor.Colors.Gray.Darken3
        },
        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "260px",
            DrawerWidthRight = "300px"
        }
    };

    private List<LanguageInfo> SupportedLanguages = new()
    {
        new LanguageInfo("de-DE", "/flags/de-DE.png", "german"),
        new LanguageInfo("en-US", "/flags/us-EN.png", "english"),
    };

    string DarkLightModeButtonIcon => _isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode;
    private record LanguageInfo(string CultureCode, string FlagPath, string DisplayName);
}
